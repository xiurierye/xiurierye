<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Les impôts sont trop lourds</title>
  <subtitle>T . T</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiurierye.github.io/"/>
  <updated>2017-08-01T06:10:59.000Z</updated>
  <id>http://xiurierye.github.io/</id>
  
  <author>
    <name>xiurierye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>testmypost</title>
    <link href="http://xiurierye.github.io/uncategorized/testmypost/"/>
    <id>http://xiurierye.github.io/uncategorized/testmypost/</id>
    <published>2017-08-01T06:10:59.000Z</published>
    <updated>2017-08-01T06:10:59.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring中jackson-module-scala的源码分析（二）</title>
    <link href="http://xiurierye.github.io/scala/jackson/spring-mvc/maven/HttpMessageConverter/"/>
    <id>http://xiurierye.github.io/scala/jackson/spring-mvc/maven/HttpMessageConverter/</id>
    <published>2017-08-01T01:40:44.000Z</published>
    <updated>2017-08-07T03:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-mvc的http请求代码分析"><a href="#spring-mvc的http请求代码分析" class="headerlink" title="spring mvc的http请求代码分析"></a>spring mvc的http请求代码分析</h1><h2 id="一个最简单的GET请求"><a href="#一个最简单的GET请求" class="headerlink" title="一个最简单的GET请求"></a>一个最简单的GET请求</h2><p>先执行一次最简单的http GET请求<br>指定profile为<em>withoutJackson</em>，配置并启动tomcat，端口8080，在<a href="https://www.getpostman.com/postman" target="_blank" rel="external">postman</a>中发送一个GET请求，url为localhost:8080/java/get?str=java。得到<code>hello world: scala</code><br>查看控制台（log level已设置为trace，去掉一些无用log）</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">15:43:04.382 TRACE o.s.w.s.DispatcherServlet - Bound request context to thread: org.apache.catalina.connector.RequestFacade@6f787d04</div><div class="line">15:43:04.384 DEBUG o.s.w.s.DispatcherServlet - DispatcherServlet with name &apos;spring-dispatcher&apos; processing GET request for [/java/get]</div><div class="line">15:43:04.386 TRACE o.s.w.s.DispatcherServlet - Testing handler map [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping@7c55397] in DispatcherServlet with name &apos;spring-dispatcher&apos;</div><div class="line">15:43:04.388 DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /java/get</div><div class="line">15:43:04.393 TRACE o.s.w.s.m.m.a.RequestMappingHandlerMapping - Found 1 matching mapping(s) for [/java/get] : [&#123;[/java/get],methods=[GET]&#125;]</div><div class="line">15:43:04.393 DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Returning handler method [public java.lang.String x.h.p.m.BasicController.get(java.lang.String)]</div><div class="line">15:43:04.393 DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean &apos;basicController&apos;</div><div class="line">15:43:04.394 TRACE o.s.w.s.DispatcherServlet - Testing handler adapter [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter@57fb1e2c]</div><div class="line">15:43:04.394 DEBUG o.s.w.s.DispatcherServlet - Last-Modified value for [/java/get] is: -1</div><div class="line">15:43:04.415 TRACE o.s.w.m.s.HandlerMethodArgumentResolverComposite - Testing if argument resolver [org.springframework.web.method.annotation.RequestParamMethodArgumentResolver@218a1c72] supports [class java.lang.String]</div><div class="line">15:43:04.422 TRACE o.s.w.m.s.HandlerMethodArgumentResolverComposite - Testing if argument resolver [org.springframework.web.method.annotation.RequestParamMapMethodArgumentResolver@226bbde6] supports [class java.lang.String]</div><div class="line">...</div><div class="line">15:43:04.430 TRACE o.s.w.m.s.HandlerMethodArgumentResolverComposite - Testing if argument resolver [org.springframework.web.method.annotation.RequestParamMethodArgumentResolver@52d8f48] supports [class java.lang.String]</div><div class="line">15:43:04.443 TRACE o.s.w.s.m.m.a.ServletInvocableHandlerMethod - Invoking [BasicController.get] method with arguments [java]</div><div class="line">15:43:04.443 TRACE o.s.w.s.m.m.a.ServletInvocableHandlerMethod - Method [get] returned [hello world: java]</div><div class="line">15:43:04.475 DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Written [hello world: java] as &quot;text/plain&quot; using [org.springframework.http.converter.StringHttpMessageConverter@2b7ec6de]</div><div class="line">15:43:04.475 DEBUG o.s.w.s.DispatcherServlet - Null ModelAndView returned to DispatcherServlet with name &apos;spring-dispatcher&apos;: assuming HandlerAdapter completed request handling</div><div class="line">15:43:04.475 TRACE o.s.w.s.DispatcherServlet - Cleared thread-bound request context: org.apache.catalina.connector.RequestFacade@6f787d04</div><div class="line">15:43:04.475 DEBUG o.s.w.s.DispatcherServlet - Successfully completed request</div><div class="line">15:43:04.477 TRACE o.s.w.c.s.XmlWebApplicationContext - Publishing event in WebApplicationContext for namespace &apos;spring-dispatcher-servlet&apos;: ServletRequestHandledEvent: url=[/java/get]; client=[0:0:0:0:0:0:0:1]; method=[GET]; servlet=[spring-dispatcher]; session=[null]; user=[null]; time=[108ms]; status=[OK]</div></pre></td></tr></table></figure>
<p>跟着日志我们来走一遍spring的DispatcherServlet从接受请求到响应的过程</p>
<h3 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a><em>DispatcherServlet</em></h3><p>spring mvc接受http请求的入口是<strong>DispatcherServlet</strong>类的doDispatch方法，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Process the actual dispatching to the handler.</div><div class="line"> * The handler will be obtained by applying the servlet's HandlerMappings in order.</div><div class="line"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</div><div class="line"> * to find the first that supports the handler class.</div><div class="line"> * All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</div><div class="line"> * ...</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  HttpServletRequest processedRequest = request;</div><div class="line">  HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line">  WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">  	ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">  	Exception dispatchException = <span class="keyword">null</span>;</div><div class="line">  	<span class="keyword">try</span> &#123;</div><div class="line">  		processedRequest = checkMultipart(request);</div><div class="line">  		multipartRequestParsed = (processedRequest != request);</div><div class="line">  		<span class="comment">// Determine handler for the current request.</span></div><div class="line">  		mappedHandler = getHandler(processedRequest);</div><div class="line">  		<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</div><div class="line">  			noHandlerFound(processedRequest, response);</div><div class="line">  			<span class="keyword">return</span>;</div><div class="line">  		&#125;</div><div class="line">  		<span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">  		HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line">  		...  </div><div class="line">  		<span class="comment">// Actually invoke the handler.</span></div><div class="line">  		mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line">  		...</div><div class="line">  	&#125;</div><div class="line">  	<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">  		...</div><div class="line">  	&#125;</div><div class="line">  	processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">  	...</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">finally</span> &#123;</div><div class="line">  	...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>mappedHandler = getHandler(processedRequest)</strong><br>根据请求中地址找到对应的Controller方法（这些信息在servlet启动时已经加载）和HttpServletReqeust对象，装配一个HandlerExecutionChain，chain由路径指向的Controller 和一组拦截处理器组成，对应log日志中的如下信息：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">15:46:14.403 DEBUG o.s.w.s.DispatcherServlet - DispatcherServlet with name &apos;spring-dispatcher&apos; processing GET request for [/java/get]</div><div class="line">15:46:20.119 TRACE o.s.w.s.DispatcherServlet - Testing handler map [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping@4db78b17] in DispatcherServlet with name &apos;spring-dispatcher&apos;</div><div class="line">15:46:20.123 DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Looking up handler method for path /java/get</div><div class="line">15:46:20.133 TRACE o.s.w.s.m.m.a.RequestMappingHandlerMapping - Found 1 matching mapping(s) for [/java/get] : [&#123;[/java/get],methods=[GET]&#125;]</div><div class="line">15:46:20.134 DEBUG o.s.w.s.m.m.a.RequestMappingHandlerMapping - Returning handler method [public java.lang.String x.h.p.m.BasicController.get(java.lang.String)]</div><div class="line">15:46:20.134 DEBUG o.s.b.f.s.DefaultListableBeanFactory - Returning cached instance of singleton bean &apos;basicController&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</strong><br>返回一个适配Controller的处理器，默认的处理器有三种:</p>
<ul>
<li>RequestMappingHandlerAdapter</li>
<li>HttpRequestHandlerAdapter</li>
<li>SimpleControllerHandlerAdapter</li>
</ul>
<p>返回第一个支持的HandlerAdapter，这里是RequestMappingHandlerAdapter。<br>对应的log中的如下信息：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">15:46:20.844 TRACE o.s.w.s.DispatcherServlet - Testing handler adapter [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter@12599347]</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</strong><br>这行代码是实际处理reques请求的调用入口，将由RequestMappingHandlerAdapter完成调用任务</p>
</blockquote>
<h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a><em>RequestMappingHandlerAdapter</em></h3><p>先来看一下RequestMappingHandlerAdapter的类说明注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * An &#123;<span class="doctag">@link</span> AbstractHandlerMethodAdapter&#125; that supports &#123;<span class="doctag">@link</span> HandlerMethod&#125;s</div><div class="line"> * with their method argument and return type signature, as defined via</div><div class="line"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125;.</div><div class="line"> * ...</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>RequestMappingHandlerAdapter适配所有用@RequestMapping注解的类和方法。当http请求找到url对应的controller后，RequestMappingHandlerAdapter类会调用invokeHandlerMethod方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">	HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line">  ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">    ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line">    </div><div class="line">    ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">    invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">    invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">    invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">    invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line">    </div><div class="line">    ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer(); </div><div class="line">    ...</div><div class="line">    invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">finally</span> &#123;</div><div class="line">  	webRequest.requestCompleted();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</strong><br>创建一个ServletInvocableHandlerMethod类，这个类继承自InvocableHandlerMethod类，具有处理返回值的能力。<br><strong>invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</strong><br>设置参数解析器集合HandlerMethodArgumentResolverComposite，其内部有一个HandlerMethodArgumentResolver链表，spring mvc默认的参数解析器有26个，如图：</p>
</blockquote>
<p><img src="HandlerMethodArgumentResolverComposite--LinkedList.png" alt="HandlerMethodArgumentResolverComposite--LinkedList"></p>
<blockquote>
<p><strong>invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);</strong><br>设置返回值处理器集合HandlerMethodReturnValueHandlerComposite，其内部有一个HandlerMethodReturnValueHandler链表，spring mvc默认的返回值处理器有15个，如图：</p>
</blockquote>
<p><img src="HandlerMethodReturnValueHandler--LinkedList.png" alt="HandlerMethodReturnValueHandler--LinkedList"></p>
<blockquote>
<p><strong>invocableMethod.setDataBinderFactory(binderFactory);</strong><br>设置与@InitBinder有关的注解<br><strong>invocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);</strong><br>设置参数名发现器ParameterNameDiscoverer，其内部有一个ParameterNameDiscoverer链表，默认的有2个，如图：</p>
</blockquote>
<p><img src="ParameterNameDiscoverer--LinkedList.png" alt="ParameterNameDiscoverer--LinkedList"></p>
<blockquote>
<p><strong>invocableMethod.invokeAndHandle(webRequest, mavContainer);</strong><br>ReqeustMappingHandlerAdapter将http请求处理交给ServletInvocableHandlerMethod类做处理,由它完成参数请求参数赋值、调用Controller和返回参数转换，</p>
</blockquote>
<h3 id="ServletInvocableHandlerMethod"><a href="#ServletInvocableHandlerMethod" class="headerlink" title="ServletInvocableHandlerMethod"></a><em>ServletInvocableHandlerMethod</em></h3><p>类继承图：<br><img src="ServletInvocableHandlerMethod--Hierarchy.png" alt="ServletInvocableHandlerMethod--Hierarchy"><br>前面讲过ServletInvocableHandlerMethod增加了处理返回值的能力，在方法invokeAndHandle中，它会调用父类中的invokeForRequest方法获得Controller中待调用方法的参数值并使用反射调用方法，再处理返回值。</p>
<h4 id="InvocableHandlerMethod"><a href="#InvocableHandlerMethod" class="headerlink" title="InvocableHandlerMethod"></a><em>InvocableHandlerMethod</em></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Provides a method for invoking the handler method for a given request after resolving its</div><div class="line"> * method argument values through registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125;s.</div><div class="line"> *</div><div class="line"> * Argument resolution often requires a &#123;<span class="doctag">@link</span> WebDataBinder&#125; for data binding or for type</div><div class="line"> * conversion. Use the &#123;<span class="doctag">@link</span> #setDataBinderFactory(WebDataBinderFactory)&#125; property to supply</div><div class="line"> * a binder factory to pass to argument resolvers.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvocableHandlerMethod</span> <span class="keyword">extends</span> <span class="title">HandlerMethod</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invokeForRequest</span><span class="params">(NativeWebRequest request, ModelAndViewContainer mavContainer,</span></span></div><div class="line">    Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Invoking ["</span>);</div><div class="line">			sb.append(getBeanType().getSimpleName()).append(<span class="string">"."</span>);</div><div class="line">			sb.append(getMethod().getName()).append(<span class="string">"] method with arguments "</span>);</div><div class="line">			sb.append(Arrays.asList(args));</div><div class="line">			logger.trace(sb.toString());</div><div class="line">		&#125;</div><div class="line">		Object returnValue = doInvoke(args);</div><div class="line">		<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">			logger.trace(<span class="string">"Method ["</span> + getMethod().getName() + <span class="string">"] returned ["</span> + returnValue + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> returnValue;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer,</div><div class="line">    Object... providedArgs) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    MethodParameter[] parameters = getMethodParameters();</div><div class="line">    Object[] args = <span class="keyword">new</span> Object[parameters.length];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</div><div class="line">      MethodParameter parameter = parameters[i];</div><div class="line">      parameter.initParameterNameDiscovery(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line">      GenericTypeResolver.resolveParameterType(parameter, getBean().getClass());</div><div class="line">      args[i] = resolveProvidedArgument(parameter, providedArgs);</div><div class="line">      <span class="keyword">if</span> (args[i] != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">	  &#125;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">				args[i] = <span class="keyword">this</span>.argumentResolvers.resolveArgument(</div><div class="line">						parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">					logger.debug(getArgumentResolutionErrorMessage(<span class="string">"Error resolving argument"</span>, i),ex);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">throw</span> ex;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (args[i] == <span class="keyword">null</span>) &#123;</div><div class="line">			String msg = getArgumentResolutionErrorMessage(<span class="string">"No suitable resolver for argument"</span>, i);</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		<span class="keyword">return</span> args;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在InvocableHandlerMethod类中我们关注两个方法</p>
<ul>
<li>invokeForRequest<br>在获得Controller方法的参数值后调用Controller方法，参数值通过HandlerMethodArgumentResolver方法解析器来解析</li>
<li>getMethodArgumentValues<br>从当前request中获得方法参数值，通过HandlerMethodArgumentResolverComposite中的supportParameter方法，从HandlerMethodArgumentResolver链表中找到一个支持的解析器，并将它放在一个Map中缓存起来，加快一次读取。给出主要代码块<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Find a registered &#123;<span class="doctag">@link</span> HandlerMethodArgumentResolver&#125; that supports the given method parameter.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> HandlerMethodArgumentResolver <span class="title">getArgumentResolver</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</div><div class="line">  HandlerMethodArgumentResolver result = <span class="keyword">this</span>.argumentResolverCache.get(parameter);</div><div class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (HandlerMethodArgumentResolver methodArgumentResolver : <span class="keyword">this</span>.argumentResolvers) &#123;</div><div class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">        logger.trace(<span class="string">"Testing if argument resolver ["</span> + methodArgumentResolver + <span class="string">"] supports "</span> +</div><div class="line">          parameter.getGenericParameterType() + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (methodArgumentResolver.supportsParameter(parameter)) &#123;</div><div class="line">        result = methodArgumentResolver;</div><div class="line">        <span class="keyword">this</span>.argumentResolverCache.put(parameter, result);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>前面说到HandlerMethodArgumentResolverComposite是由26个参数解析器组成，在本次请求中，满足支持的解析器是RequestParamMethodArgumentResolver，对应的log日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">10:07:28.393 TRACE o.s.w.m.s.HandlerMethodArgumentResolverComposite - Testing if argument resolver [org.springframework.web.method.annotation.RequestParamMethodArgumentResolver@336e702f] supports [class java.lang.String]</div><div class="line">...</div><div class="line">10:07:28.521 TRACE o.s.w.m.s.HandlerMethodArgumentResolverComposite - Testing if argument resolver [org.springframework.web.method.annotation.RequestParamMethodArgumentResolver@398bdb86] supports [class java.lang.String]</div></pre></td></tr></table></figure></p>
<p>找到解析器后调用解析器的resolveArgument方法，获得参数值。对应的log日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10:26:53.245 TRACE o.s.w.s.m.m.a.ServletInvocableHandlerMethod - Invoking [BasicController.get] method with arguments [java]</div></pre></td></tr></table></figure></p>
<p><code>至此从request请求中获取方法参数值的主要过程结束。</code><br>完成controller方法调用后对应日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10:27:49.102 TRACE o.s.w.s.m.m.a.ServletInvocableHandlerMethod - Method [get] returned [hello world: java]</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>this.returnValueHandlers.handleReturnValue(returnValue, getReturnValueType(returnValue), mavContainer, webRequest);</strong><br>处理返回值，从HandlerMethodReturnValueHandlerComposite中的HandlerMethodReturnValueHandler链表找到第一个匹配的处理器类，本次请求匹配的处理器类是RequestResponseBodyMethodProcessor,并交予RequestResponseBodyMethodProcessor处理返回值</p>
</blockquote>
<h3 id="RequestResponseBodyMethodProcessor"><a href="#RequestResponseBodyMethodProcessor" class="headerlink" title="RequestResponseBodyMethodProcessor"></a><em>RequestResponseBodyMethodProcessor</em></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Resolves method arguments annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125; and handles return</div><div class="line"> * values from methods annotated with &#123;<span class="doctag">@code</span> <span class="doctag">@ResponseBody</span>&#125; by reading and writing</div><div class="line"> * to the body of the request or response with an &#123;<span class="doctag">@link</span> HttpMessageConverter&#125;.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An &#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125; method argument is also validated if it is annotated</div><div class="line"> * with &#123;<span class="doctag">@code</span> <span class="doctag">@javax</span>.validation.Valid&#125;. In case of validation failure,</div><div class="line"> * &#123;<span class="doctag">@link</span> MethodArgumentNotValidException&#125; is raised and results in an HTTP 400</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestResponseBodyMethodProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractMessageConverterMethodProcessor</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承自AbstractMessageConverterMethodProcessor，处理@RequestBody和@ResponseBody的注解。<br>观察已经获得的日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEBUG o.s.w.s.m.m.a.RequestResponseBodyMethodProcessor - Written [hello world: java] as &quot;text/plain&quot; using [org.springframework.http.converter.StringHttpMessageConverter@4db079f9]</div></pre></td></tr></table></figure></p>
<p>我们会发现一个<strong><a href="http://docs.spring.io/spring/docs/current/javadoc-api//org/springframework/http/converter/StringHttpMessageConverter.html" target="_blank" rel="external">StringHttpMessageConverter</a></strong>类，从名字可以猜到，这是一个转换String类型的http message的类。跟踪一下继承结构：<br><img src="StringHttpMessageConverter--Hierarchy.png" alt="StringHttpMessageConverter--Hierarchy"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</div><div class="line"> * ...</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口<strong><a href="http://docs.spring.io/spring/docs/current/javadoc-api//org/springframework/http/converter/HttpMessageConverter.html" target="_blank" rel="external">HttpMessageConverter</a></strong>，这是一个策略接口，定义将http请求体或响应体转换成指定的数据类型，接口定义如下：<br><img src="Interface-Diagram-HttpMessageConverter.png" alt="Interface-Digram-HttpMessageConverter"><br>接口解释</p>
<style type="text/css">
table th:first-of-type {
    width: 115px;
}
</style>

<table>
<thead>
<tr>
<th style="text-align:left">Modifier and Type</th>
<th style="text-align:left">Method</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">canRead(Class&lt;?&gt; clazz,MediaType mediaType)</td>
<td style="text-align:left">Indicates whether the given class can be read by this converter.</td>
</tr>
<tr>
<td style="text-align:left">boolean</td>
<td style="text-align:left">canWrite(Class&lt;?&gt; clazz, MediaType mediaType)</td>
<td style="text-align:left">Indicates whether the given class can be written by this converter.</td>
</tr>
<tr>
<td style="text-align:left">T</td>
<td style="text-align:left">read(Class&lt;? extends T&gt; clazz,HttpInputMessage inputMessage)</td>
<td style="text-align:left">Read an object of the given type from the given input message, and returns it.</td>
</tr>
<tr>
<td style="text-align:left">void</td>
<td style="text-align:left">write(T t, MediaType contentType, HttpOutputMessage outputMessage)</td>
<td style="text-align:left">Write an given object to the given output message.</td>
</tr>
<tr>
<td style="text-align:left">List<mediatype></mediatype></td>
<td style="text-align:left">getSupportedMediaTypes()</td>
<td style="text-align:left">Return the list of MediaType objects supported by this converter.</td>
</tr>
</tbody>
</table>
<p>从继承图上可以看到有多个HttMessageConverter实现类。了解这些后回到程序，刚刚程序已经拿到了方法调用的返回值了，RequestResponseBodyMethodProcessor会调用父类中的writeWithMessageConverters方法，这个方法中有一个for 循环<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for (HttpMessageConverter&lt;?&gt; messageConverter : this.messageConverters) &#123;</div><div class="line">  if (messageConverter.canWrite(valueType, selectedMediaType)) &#123;</div><div class="line">  	outputValue = (T) getAdvice().beforeBodyWrite(outputValue, returnType, selectedMediaType,</div><div class="line">      (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</div><div class="line">      inputMessage, outputMessage);</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>遍历所有Converters，在本次请求中符合条件的就是StringHttpMessageConverter转换器类。<br>到这里reqeust请求结束</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;spring-mvc的http请求代码分析&quot;&gt;&lt;a href=&quot;#spring-mvc的http请求代码分析&quot; class=&quot;headerlink&quot; title=&quot;spring mvc的http请求代码分析&quot;&gt;&lt;/a&gt;spring mvc的http请求代码分析&lt;/h1&gt;&lt;h2 id=&quot;一个最简单的GET请求&quot;&gt;&lt;a href=&quot;#一个最简单的GET请求&quot; class=&quot;headerlink&quot; title=&quot;一个最简单的GET请求&quot;&gt;&lt;/a&gt;一个最简单的GET请求&lt;/h2&gt;&lt;p&gt;先执行一次最简单的http GET请求&lt;br&gt;指定profile为&lt;em&gt;withoutJackson&lt;/em&gt;，配置并启动tomcat，端口8080，在&lt;a href=&quot;https://www.getpostman.com/postman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;postman&lt;/a&gt;中发送一个GET请求，url为localhost:8080/java/get?str=java。得到&lt;code&gt;hello world: scala&lt;/code&gt;&lt;br&gt;查看控制台（log level已设置为trace，去掉一些无用log）&lt;/p&gt;
    
    </summary>
    
      <category term="scala" scheme="http://xiurierye.github.io/categories/scala/"/>
    
      <category term="jackson" scheme="http://xiurierye.github.io/categories/scala/jackson/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/categories/scala/jackson/spring-mvc/"/>
    
      <category term="maven" scheme="http://xiurierye.github.io/categories/scala/jackson/spring-mvc/maven/"/>
    
    
      <category term="maven" scheme="http://xiurierye.github.io/tags/maven/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/tags/spring-mvc/"/>
    
      <category term="scala" scheme="http://xiurierye.github.io/tags/scala/"/>
    
      <category term="jackson" scheme="http://xiurierye.github.io/tags/jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring中jackson-module-scala的源码分析（一）</title>
    <link href="http://xiurierye.github.io/scala/jackson/spring-mvc/maven/spring-mvc-scala-output/"/>
    <id>http://xiurierye.github.io/scala/jackson/spring-mvc/maven/spring-mvc-scala-output/</id>
    <published>2017-07-31T03:30:18.000Z</published>
    <updated>2017-08-01T01:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><blockquote>
<p>在 <em><a href="https://xiurierye.github.io/scala/spring-mvc/maven/maven-spirng-scala/">maven搭建基于spring-mvc的scala web项目</a></em> 这篇文章中我们提到，通过使用<a href="https://github.com/FasterXML/jackson-module-scala" target="_blank" rel="external">jackson-module-scala</a>来返回scala语言中的集合或属性，那么其中的原理是什么，源码又是如何实现的，将在这个专题中做一下研究。</p>
</blockquote>
<p>本专题将分为四大部分</p>
<ul>
<li>工程</li>
<li>spring mvc消息转换类解释</li>
<li>原生 mvc:annotation-driven 配置项代码分析</li>
<li>使用 jackson-module-scala 代码分析</li>
</ul>
<a id="more"></a>
<h2 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h2><p>使用maven构建scala web项目，在这篇<a href="https://xiurierye.github.io/scala/spring-mvc/maven/maven-spirng-scala/">博客</a>的基础上做一些版本调整。spring-mvc使用4.3.3.RELEASE，scala-library使用2.12.3，鼓励大家使用新的版本。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里排除spring-core依赖的commons-logging包，使用slf4j桥接logback，关于slf4使用及其分析将在后面发布博客<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<div class="note warning"><p>请注意解决依赖冲突 </p>
</div>
<h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><p>创建两个profile</p>
<ul>
<li>withoutJackson</li>
<li>withJackson</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>withoutJackson<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>withJackson<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-scala_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>你可以在<a href="https://github.com/xiurierye/spring-mvc-scala-jackson" target="_blank" rel="external">github</a>上找到这个工程</p>
<!-- 了解这个之前需要，先了解一下没有配置的<mvc:annotation-driven>时，spring-mvc 对request 和response 的执行原理




HttpOutputMessage  
HttpInputMessage

HttpMessageConverter 中的read()  write()方法


RequestMappingHandlerAdapter中构造函数
    this.messageConverters.add(new ByteArrayHttpMessageConverter());
    this.messageConverters.add(stringHttpMessageConverter);
    this.messageConverters.add(new SourceHttpMessageConverter<Source>());        
    this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());
塞了四种




ByteArrayHttpMessageConverter
StringHttpMessageConverter
ResourceHttpMessageConverter
SourceHttpMessageConverter
AllEncommpassingFormHttpMessageConverter
Jaxb2RootElementHttpMessageConverter

 -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;课程介绍&quot;&gt;&lt;a href=&quot;#课程介绍&quot; class=&quot;headerlink&quot; title=&quot;课程介绍&quot;&gt;&lt;/a&gt;课程介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在 &lt;em&gt;&lt;a href=&quot;https://xiurierye.github.io/scala/spring-mvc/maven/maven-spirng-scala/&quot;&gt;maven搭建基于spring-mvc的scala web项目&lt;/a&gt;&lt;/em&gt; 这篇文章中我们提到，通过使用&lt;a href=&quot;https://github.com/FasterXML/jackson-module-scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jackson-module-scala&lt;/a&gt;来返回scala语言中的集合或属性，那么其中的原理是什么，源码又是如何实现的，将在这个专题中做一下研究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本专题将分为四大部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工程&lt;/li&gt;
&lt;li&gt;spring mvc消息转换类解释&lt;/li&gt;
&lt;li&gt;原生 mvc:annotation-driven 配置项代码分析&lt;/li&gt;
&lt;li&gt;使用 jackson-module-scala 代码分析&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="scala" scheme="http://xiurierye.github.io/categories/scala/"/>
    
      <category term="jackson" scheme="http://xiurierye.github.io/categories/scala/jackson/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/categories/scala/jackson/spring-mvc/"/>
    
      <category term="maven" scheme="http://xiurierye.github.io/categories/scala/jackson/spring-mvc/maven/"/>
    
    
      <category term="maven" scheme="http://xiurierye.github.io/tags/maven/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/tags/spring-mvc/"/>
    
      <category term="scala" scheme="http://xiurierye.github.io/tags/scala/"/>
    
      <category term="jackson" scheme="http://xiurierye.github.io/tags/jackson/"/>
    
  </entry>
  
  <entry>
    <title>maven搭建基于spring-mvc的scala web项目</title>
    <link href="http://xiurierye.github.io/scala/spring-mvc/maven/maven-spirng-scala/"/>
    <id>http://xiurierye.github.io/scala/spring-mvc/maven/maven-spirng-scala/</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2017-07-31T15:35:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring-mcv 由于项目的历史原因，这里用一个老版本  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring-version</span>&gt;</span>3.2.9.RELEASE<span class="tag">&lt;/<span class="name">spring-version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scala-version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">scala-version</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- dependencies --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;scala-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h3><p>如果项目中混用了 java 与scala，则需要配置如下execution<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- plugins--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span>                                         </div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>        </div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span>                                 </div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>                              </div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-compile-first<span class="tag">&lt;/<span class="name">id</span>&gt;</span>         </div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span>     </div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span>                              </div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>add-source<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>          </div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>             </div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>                             </div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>                             </div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span>                              </div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>scala-test-compile<span class="tag">&lt;/<span class="name">id</span>&gt;</span>          </div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span>                              </div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span>         </div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span>                             </div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span>                             </div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span>                                </div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="type">Array</span>(<span class="string">"/"</span>))</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="type">Array</span>(<span class="string">"/helloWorld"</span>))</div><div class="line">  <span class="meta">@ResponseBody</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">home=</span> "<span class="title">Hello</span> <span class="title">World</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="返回集合"><a href="#返回集合" class="headerlink" title="返回集合"></a>返回集合</h2><p>返回一个字符串并不能满足日常开发需要，如何从后端返回一个集合呢。<br>这里先给出解决方案，原理会在日后解释。</p>
<div class="note info"><p>使用<a href="https://github.com/FasterXML/jackson-module-scala" target="_blank" rel="external">jackson-module-scala</a></p>
</div>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-module-scala_2.10<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><p>在spring的配置文件中加入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span>                                                                           </div><div class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span>                                                                      </div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span>                                                        </div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"JsonMapper"</span>/&gt;</span>                                                          </div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                                                                                                   </div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span>                                                 </div><div class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span>                                                                            </div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json; charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span>                                </div><div class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span>                                                                           </div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span>                                                                           </div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>                                                                                   </div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span>                                                                     </div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="bean配置"><a href="#bean配置" class="headerlink" title="bean配置"></a>bean配置</h3><p>个人喜欢java配置，下面是我的配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"JsonMapper"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">jsonMapper</span><span class="params">()</span></span>&#123;</div><div class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</div><div class="line">        objectMapper.registerModule(<span class="keyword">new</span> DefaultScalaModule());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> objectMapper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="代码片段-1"><a href="#代码片段-1" class="headerlink" title="代码片段"></a>代码片段</h3><p>在正确完成以上配置之后，就可以返回Scala集合、case class和含有属性get方法的class</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span>  <span class="title">Person</span>(<span class="params">age:<span class="type">Int</span>,any: <span class="type">Any</span></span>)</span></div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="type">Array</span>(<span class="string">"/map"</span>))</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">map=</span> <span class="title">Map</span></span>(<span class="string">"key"</span>-&gt;<span class="string">"value"</span>)</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="type">Array</span>(<span class="string">"/person"</span>))</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">thePerson=</span> <span class="title">new</span> <span class="title">Person</span></span>(<span class="number">12</span>,<span class="type">Map</span>(<span class="string">"firstName"</span>-&gt;<span class="string">"Tom"</span>,<span class="string">"secondName"</span>-&gt;<span class="type">List</span>(<span class="string">"White"</span>)))</div></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>无法返回没有get属性值的class对象</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">anotherPerson</span>(<span class="params">age:<span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="type">Array</span>(<span class="string">"/get406"</span>))</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get406=</span> <span class="title">new</span>  <span class="title">anotherPerson</span></span>(<span class="number">10</span>)</div></pre></td></tr></table></figure>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>你可在<a href="https://github.com/xiurierye/maven-spring-mcv-scala" target="_blank" rel="external">github</a>上找到这个项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;pom配置&quot;&gt;&lt;a href=&quot;#pom配置&quot; class=&quot;headerlink&quot; title=&quot;pom配置&quot;&gt;&lt;/a&gt;pom配置&lt;/h2&gt;&lt;h3 id=&quot;依赖管理&quot;&gt;&lt;a href=&quot;#依赖管理&quot; class=&quot;headerlink&quot; title=&quot;依赖管理&quot;&gt;&lt;/a&gt;依赖管理&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- spring-mcv 由于项目的历史原因，这里用一个老版本  --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spring-version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.2.9.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spring-version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scala-version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.10.4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scala-version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- dependencies --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.scala-lang&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;scala-library&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;scala-version&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-webmvc&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;spring-version&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="scala" scheme="http://xiurierye.github.io/categories/scala/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/categories/scala/spring-mvc/"/>
    
      <category term="maven" scheme="http://xiurierye.github.io/categories/scala/spring-mvc/maven/"/>
    
    
      <category term="maven" scheme="http://xiurierye.github.io/tags/maven/"/>
    
      <category term="spring-mvc" scheme="http://xiurierye.github.io/tags/spring-mvc/"/>
    
      <category term="scala" scheme="http://xiurierye.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>hexo new/public 命令解释</title>
    <link href="http://xiurierye.github.io/tech/myTest/"/>
    <id>http://xiurierye.github.io/tech/myTest/</id>
    <published>2017-07-27T15:25:54.000Z</published>
    <updated>2017-07-28T02:11:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用的hexo new/public命令说明<br><a id="more"></a> </p>
<p>hexo new [layout] &lt; title &gt; 理解为 创建一个 在 ${hexoDir}/source/<em>.drafts或者${hexoDir}/source/</em>.posts或者${hexoDir}/source/ 目录下的一个${fileName}.md 文件，可以理解为第一步操作，注意在命令行中 不要夹md后缀</p>
<p>hexo publish [layout] &lt; title &gt; 理解为 发布一个位于${hexoDir}/source/<em>.drafts或者${hexoDir}/source/</em>.posts或者${hexoDir}/source/ 目录下的某个${fileName}.md 文件，  同样不要加md后缀</p>
<p>我用的比较多的是如下顺序  en </p>
<p>hexo new draft myPost<br>然后编辑 预览  定稿后<br>hexo publish myPost  可以打成  hexo publish draft myPost  这样hexo 就吧位于draft目录下的myPost文件 发布到post文件下 ，随下一次发布文章到网上</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的hexo new/public命令说明&lt;br&gt;
    
    </summary>
    
      <category term="tech" scheme="http://xiurierye.github.io/categories/tech/"/>
    
    
      <category term="hexo command" scheme="http://xiurierye.github.io/tags/hexo-command/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 原生 Hello World</title>
    <link href="http://xiurierye.github.io/helloworld/hello-world/"/>
    <id>http://xiurierye.github.io/helloworld/hello-world/</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2017-07-28T15:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="helloworld" scheme="http://xiurierye.github.io/categories/helloworld/"/>
    
    
      <category term="hello world" scheme="http://xiurierye.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
